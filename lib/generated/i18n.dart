import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "My Expenses"
  String get appName => "My Expenses";
  /// "Dark"
  String get dark => "Dark";
  /// "Light"
  String get light => "Light";
  /// "English"
  String get english => "English";
  /// "Spanish"
  String get spanish => "Spanish";
  /// "Incomes"
  String get incomes => "Incomes";
  /// "expenses"
  String get expenses => "expenses";
  /// "None"
  String get none => "None";
  /// "Each day"
  String get eachDay => "Each day";
  /// "Each week"
  String get repetitionCycleEachWeek => "Each week";
  /// "Each month"
  String get repetitionCycleEachMonth => "Each month";
  /// "eachYear"
  String get repetitionCycleEachYear => "eachYear";
  /// "Each hour"
  String get syncIntervalEachHour => "Each hour";
  /// "Each 3 hours"
  String get syncIntervalEach3Hours => "Each 3 hours";
  /// "Each 6 hours"
  String get syncIntervalEach6Hours => "Each 6 hours";
  /// "Each 12 hours"
  String get syncIntervalEach12Hours => "Each 12 hours";
  /// "Theme"
  String get settingsTheme => "Theme";
  /// "Select an app theme"
  String get settingsSelectAppTheme => "Select an app theme";
  /// "Choose a base app color"
  String get settingsChooseAppTheme => "Choose a base app color";
  /// "Use dark amoled theme"
  String get settingsUseDarkAmoled => "Use dark amoled theme";
  /// "Accent Color"
  String get settingsAccentColor => "Accent Color";
  /// "Choose an accent color"
  String get settingsChooseAccentColor => "Choose an accent color";
  /// "Language"
  String get settingsLanguage => "Language";
  /// "Choose a language"
  String get settingsChooseLanguage => "Choose a language";
  /// "Select a language"
  String get settingsSelectLanguage => "Select a language";
  /// "Sync"
  String get settingsSync => "Sync";
  /// "Select an interval"
  String get settingsSelectSyncInterval => "Select an interval";
  /// "Choose a sync interval"
  String get settingsChooseSyncInterval => "Choose a sync interval";
  /// "About"
  String get settingsAbout => "About";
  /// "An app that helps you to keep track of your expenses."
  String get settingsAboutSummary => "An app that helps you to keep track of your expenses.";
  /// "Donations"
  String get settingsDonations => "Donations";
  /// "I hope you are enjoying using this app, if you would like to buy me a coffee/beer, just send me an email."
  String get settingsDonationsMsg => "I hope you are enjoying using this app, if you would like to buy me a coffee/beer, just send me an email.";
  /// "I made this app in my free time and it is also open source. If you would like to help me, report an issue, have an idea, want a feature to be implemented, etc please open an issue here:"
  String get settingsDonationSupport => "I made this app in my free time and it is also open source. If you would like to help me, report an issue, have an idea, want a feature to be implemented, etc please open an issue here:";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_es_VE extends I18n {
  const _I18n_es_VE();

  /// "Mis Gastos"
  @override
  String get appName => "Mis Gastos";
  /// "Oscuro"
  @override
  String get dark => "Oscuro";
  /// "Ligero"
  @override
  String get light => "Ligero";
  /// "Inglés"
  @override
  String get english => "Inglés";
  /// "Español"
  @override
  String get spanish => "Español";
  /// "Ingresos"
  @override
  String get incomes => "Ingresos";
  /// "Gastos"
  @override
  String get expenses => "Gastos";
  /// "Ninguno"
  @override
  String get none => "Ninguno";
  /// "Cada día"
  @override
  String get eachDay => "Cada día";
  /// "Cada semana"
  @override
  String get repetitionCycleEachWeek => "Cada semana";
  /// "Cada mes"
  @override
  String get repetitionCycleEachMonth => "Cada mes";
  /// "Cada año"
  @override
  String get repetitionCycleEachYear => "Cada año";
  /// "Cada hora"
  @override
  String get syncIntervalEachHour => "Cada hora";
  /// "Cada 3 horas"
  @override
  String get syncIntervalEach3Hours => "Cada 3 horas";
  /// "Cada 6 horas"
  @override
  String get syncIntervalEach6Hours => "Cada 6 horas";
  /// "Cada 12 horas"
  @override
  String get syncIntervalEach12Hours => "Cada 12 horas";
  /// "Tema"
  @override
  String get settingsTheme => "Tema";
  /// "Selecciona un tema"
  @override
  String get settingsSelectAppTheme => "Selecciona un tema";
  /// "Escoge un color base para la app"
  @override
  String get settingsChooseAppTheme => "Escoge un color base para la app";
  /// "Usar el tema oscuro para pantallas Amoled"
  @override
  String get settingsUseDarkAmoled => "Usar el tema oscuro para pantallas Amoled";
  /// "Color de acento"
  @override
  String get settingsAccentColor => "Color de acento";
  /// "Escoge un color de acento"
  @override
  String get settingsChooseAccentColor => "Escoge un color de acento";
  /// "Lenguaje"
  @override
  String get settingsLanguage => "Lenguaje";
  /// "Escoge un lenguaje"
  @override
  String get settingsChooseLanguage => "Escoge un lenguaje";
  /// "Selecciona un lenguaje"
  @override
  String get settingsSelectLanguage => "Selecciona un lenguaje";
  /// "Sincronización"
  @override
  String get settingsSync => "Sincronización";
  /// "Selecciona un intervalo"
  @override
  String get settingsSelectSyncInterval => "Selecciona un intervalo";
  /// "Escoge un intervalo de sincronización"
  @override
  String get settingsChooseSyncInterval => "Escoge un intervalo de sincronización";
  /// "Acerca de"
  @override
  String get settingsAbout => "Acerca de";
  /// "Una aplicación que te ayuda a mantener un registro de tus gastos."
  @override
  String get settingsAboutSummary => "Una aplicación que te ayuda a mantener un registro de tus gastos.";
  /// "Donaciones"
  @override
  String get settingsDonations => "Donaciones";
  /// "Espero que disfrutes al usar esta aplicación, si te gustaría comprarme un cafe o una cerveza, envíame un email."
  @override
  String get settingsDonationsMsg => "Espero que disfrutes al usar esta aplicación, si te gustaría comprarme un cafe o una cerveza, envíame un email.";
  /// "Hice esta aplicación en mi tiempo libre y también es de código abierto. Si desea ayudarme, informar un problema, tienes una idea, deseas que se implemente una función, etc., crea un issue aquí:"
  @override
  String get settingsDonationSupport => "Hice esta aplicación en mi tiempo libre y también es de código abierto. Si desea ayudarme, informar un problema, tienes una idea, deseas que se implemente una función, etc., crea un issue aquí:";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("es", "VE")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("es_VE" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_VE());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("es" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_VE());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}